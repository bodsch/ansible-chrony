#jinja2: trim_blocks: True, lstrip_blocks: True
# {{ ansible_managed }}

{% if not (ansible_distribution | lower == "debian" and
           ansible_distribution_major_version | int == 10) and
      not (ansible_distribution | lower == "ubuntu" and
           ansible_distribution_major_version | int in [18, 20]) %}
  {% if chrony_config.conf_directory is defined and
        chrony_config.conf_directory | string | length > 0 %}
confdir {{ chrony_config.conf_directory }}
  {% endif %}
{% endif %}

{% if chrony_config.drift_file is defined and
      chrony_config.drift_file | string | length > 0 %}
driftfile {{ chrony_config.drift_file }}
{% endif %}

{% if chrony_config.key_file is defined and
      chrony_config.key_file | string | length > 0 %}
keyfile {{ chrony_config.key_file }}
{% endif %}

{% if not (ansible_distribution | lower == "debian" and
           ansible_distribution_major_version | int == 10) and
      not (ansible_distribution | lower == "ubuntu" and
           ansible_distribution_major_version | int in [18, 20]) %}
  {% if chrony_config.nts_dump_directory is defined and
        chrony_config.nts_dump_directory | string | length > 0 %}
ntsdumpdir {{ chrony_config.nts_dump_directory }}
  {% endif %}
{% endif %}

{% if chrony_config.source_directories is defined and
      chrony_config.source_directories | count > 0 %}
  {% for directory in chrony_config.source_directories %}
sourcedir {{ directory }}
  {% endfor %}
{% endif %}

{% if chrony_config.log is defined %}
  {% if chrony_config.log.types is defined and
        chrony_config.log.types | count > 0 %}
log {{ chrony_config.log.types | join(' ') }}
  {% endif %}
  {% if chrony_config.log.directory is defined and
        chrony_config.log.directory | string | length > 0 %}
logdir {{ chrony_config.log.directory }}
  {% endif %}
{% endif %}

{% if chrony_config.ntp_servers | length > 0 %}
# List of NTP servers to use
  {% for server in chrony_config.ntp_servers %}
server {{ server }}
  {% endfor %}
{% endif %}

{%- if chrony_config.ntp_pools | count > 0 %}
# List of NTP pools to use
  {% for pool in chrony_config.ntp_pools %}
pool {{ pool }}
  {% endfor %}
{% endif %}

{% if chrony_config.ntp_peers | count > 0 %}
# List of NTP peers to use
  {% for peer in chrony_config.ntp_peers %}
peer {{ peer }}
  {% endfor %}
{% endif %}


# Step the clock if the adjustement is larger than *threshold* second
# but only the first *limit* times.
{% if chrony_config.makestep is defined %}
makestep {{ chrony_config.makestep.threshold | default('1') }} {{ chrony_config.makestep.limit | default('10') }}
{% endif %}

{% if chrony_config.rtc is defined %}
# Keep UTC date and time for RTC
  {% if chrony_config.rtc.on_utc is defined and
        chrony_config.rtc.on_utc %}
rtconutc
  {% endif %}

# Enable RTC synchronization
  {% if chrony_config.rtc.sync is defined and
        chrony_config.rtc.sync %}
rtcsync
  {% endif %}
{% endif %}

# Enable hardware timestamping on all interfaces that support it.
#hwtimestamp *

# Increase the minimum number of selectable sources required to adjust
# the system clock.
#minsources 2

# Serve time even if not synchronized to a time source.
#local stratum 10

{% if chrony_config.leap_sec_tz is defined and
      chrony_config.leap_sec_tz | string | length > 0 %}
leapsectz {{ chrony_config.leap_sec_tz }}
{% endif %}

# Listen for commands only on localhost
{% if chrony_config.bind_cmd_addresses is defined and
      chrony_config.bind_cmd_addresses | count > 0 %}
  {% for addr in chrony_config.bind_cmd_addresses %}
bindcmdaddress {{ addr }}
  {% endfor %}
{% endif %}

{% if chrony_config.allow | count > 0 %}
# Allow NTP requests from these clients:
  {% for addr in chrony_config.allow %}
allow {{ addr }}
  {% endfor %}
{% endif %}

{% if chrony_config.deny | count > 0 %}
# Deny NTP requests from these clients:
  {% for addr in chrony_config.deny %}
deny {{ addr }}
  {% endfor %}
{% endif %}
