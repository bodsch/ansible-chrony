---

- name: systemd
  when:
    - ansible_service_mgr | lower == "systemd"
  block:
    - name: ensure {{ chrony_service.name }}.service.d is present
      ansible.builtin.file:
        state: directory
        dest: "/etc/systemd/system/{{ chrony_service.name }}.service.d"
        mode: 0750

    - name: create overwrite.conf for systemd
      ansible.builtin.template:
        src: init/systemd/overwrite.conf.j2
        dest: "/etc/systemd/system/{{ chrony_service.name }}.service.d/overwrite.conf"
        mode: 0444
      notify:
        - reload systemctl daemon

- name: flush handlers
  ansible.builtin.meta: flush_handlers

- name: create logging directory
  ansible.builtin.file:
    path: "{{ chrony_config.log.directory }}"
    state: directory
    owner: "{{ chrony_user }}"
    group: "{{ chrony_group }}"
    mode: 0775

- name: create sysconfig directory
  ansible.builtin.file:
    path: "{{ chrony_system_config.file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: create configuration directory
  ansible.builtin.file:
    path: "{{ chrony_config.conf_directory }}"
    state: directory
    owner: root
    group: root
    mode: 0755
  when:
    - chrony_config.conf_directory is defined
    - chrony_config.conf_directory | length > 0

- name: create default config
  ansible.builtin.template:
    src: "{{ chrony_system_config.template }}"
    dest: "{{ chrony_system_config.file }}"
    owner: root
    group: root
    mode: 0644
  notify:
    - restart service

- name: create configuration directory
  ansible.builtin.file:
    path: "{{ chrony_config_file | dirname }}"
    state: directory
    owner: root
    group: root
    mode: 0755

- name: create chrony configuration
  ansible.builtin.template:
    src: chrony.conf.j2
    dest: "{{ chrony_config_file }}"
    owner: root
    group: root
    mode: 0644
    backup: true
  notify:
    - restart service

- name: start chrony first time
  ansible.builtin.service:
    name: '{{ chrony_service.name }}'
    state: started
  ignore_errors: true
  register: service_status

- name: detect error
  when:
    - service_status is defined
    - service_status.failed
  block:

    - name: list /var  # noqa no-changed-when
      ansible.builtin.shell:
        cmd: |
          ls -lth /var/log &&
          ls -lth /var/log/chrony &&
          ls -lth /var/run
        chdir: /var

    - name: detect error
      when:
        - ansible_service_mgr == 'systemd'
      block:
        - name: systemd unit
          ansible.builtin.debug:
            msg: "{{ service_status }}"

        - name: wait 2 seconds
          ansible.builtin.pause:
            seconds: 2

        - name: get journal log
          bodsch.core.journalctl:
            lines: 250
          register: chrony_journal

        - name: journalctl output
          ansible.builtin.debug:
            msg: "{{ chrony_journal.stdout }}"
          when:
            - chrony_journal.stdout is defined

- name: flush handlers
  ansible.builtin.meta: flush_handlers

...
